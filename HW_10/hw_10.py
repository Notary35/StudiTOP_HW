"""
# –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Ññ10üìÉ
## –ß–∞—Å—Ç—å 1: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
"""
from typing import Callable

special_symbols_set = {'!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '+', '-', '=', '~', '`', '{', '}', '[', ']', '|', '\\', ';', ':', "'", '"', '<', '>', ',', '.', '?', '/'}

user_password = str(input("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: "))


def password_checker(length: int = 8) -> Callable:
    def decorator(func: Callable) -> Callable:
        def wrapper(password: str):
            errors = []
            if len(password) < length:
                errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
            if set(password) & special_symbols_set == set():
                special_symbols_list = list(special_symbols_set)
                errors.append(f"–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü-—Å–∏–º–≤–æ–ª: {', '.join(special_symbols_list[:5])} –∏ —Ç.–¥.")
            if not any (simbol.isalpha() for simbol in password):
                errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã")
            if not any (simbol.isupper() for simbol in password):
                errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É")
            if not any (simbol.islower() for simbol in password):
                errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É")
            if not any(simbol.isdigit() for simbol in password):
                errors.append("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è-–±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É")
            if " " in password:
                errors.append("–ü–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã")
            if errors:
                raise ValueError("\n".join(errors))
            return func(password)
        return wrapper
    return decorator

@password_checker()
def register_user(password: str) -> str:
    return (f'–ü–∞—Ä–æ–ª—å "{password}" –ø—Ä–∏–Ω—è—Ç!')

print(register_user(user_password))
